-- === app_settings ===
CREATE TABLE IF NOT EXISTS app_settings (
  setting_key VARCHAR(100) PRIMARY KEY,
  setting_value TEXT NULL,
  "type" TEXT NOT NULL,
  section VARCHAR(100) NULL,
  description TEXT NULL,
  is_protected BOOLEAN NOT NULL DEFAULT FALSE,
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_app_settings_version CHECK (version >= 0),
  updated_by BIGINT NULL,
  CONSTRAINT chk_app_settings_type CHECK ("type" IN ('string','int','bool','json','secret'))
);

-- === audit_log ===
CREATE TABLE IF NOT EXISTS audit_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  table_name VARCHAR(100) NOT NULL,
  record_id BIGINT NOT NULL,
  changed_by BIGINT NULL,
  change_type TEXT NOT NULL,
  old_value JSONB NULL,
  new_value JSONB NULL,
  changed_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  ip_bin BYTEA NULL,
  user_agent VARCHAR(1024) NULL,
  request_id VARCHAR(100) NULL,
  CONSTRAINT chk_audit_change_type CHECK (change_type IN ('INSERT','UPDATE','DELETE'))
);

-- === auth_events ===
CREATE TABLE IF NOT EXISTS auth_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  type TEXT NOT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  occurred_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  meta JSONB NULL,
  meta_email TEXT GENERATED ALWAYS AS (meta ->> 'email') STORED,
  CONSTRAINT chk_auth_type CHECK (type IN ('login_success','login_failure','logout','password_reset','lockout'))
);

-- === authors ===
CREATE TABLE IF NOT EXISTS authors (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL UNIQUE,
  bio TEXT NULL,
  photo_url VARCHAR(255) NULL,
  story TEXT NULL,
  books_count INTEGER NOT NULL DEFAULT 0,
  ratings_count INTEGER NOT NULL DEFAULT 0,
  rating_sum INTEGER NOT NULL DEFAULT 0,
  avg_rating NUMERIC(3,2) NULL DEFAULT NULL,
  last_rating_at TIMESTAMPTZ(6) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_authors_version CHECK (version >= 0),
  deleted_at TIMESTAMPTZ(6) NULL
);

-- === book_assets ===
CREATE TABLE IF NOT EXISTS book_assets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  book_id BIGINT NOT NULL,
  asset_type TEXT NOT NULL,
  filename VARCHAR(255) NOT NULL,
  mime_type VARCHAR(100) NOT NULL,
  size_bytes BIGINT NOT NULL,
  storage_path TEXT NULL,
  content_hash VARCHAR(64) NULL,
  download_filename VARCHAR(255) NULL,
  is_encrypted BOOLEAN NOT NULL DEFAULT FALSE,
  encryption_algo VARCHAR(50) NULL,
  encryption_key_enc BYTEA NULL,
  encryption_iv  BYTEA NULL,
  encryption_tag BYTEA NULL,
  encryption_aad BYTEA NULL,
  encryption_meta JSONB NULL,
  key_version VARCHAR(64) NULL,
  key_id BIGINT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_asset_type CHECK (asset_type IN ('cover','pdf','epub','mobi','sample','extra'))
);

-- === book_categories ===
CREATE TABLE IF NOT EXISTS book_categories (
  book_id BIGINT NOT NULL,
  category_id BIGINT NOT NULL,
  PRIMARY KEY (book_id, category_id)
);

-- === books ===
CREATE TABLE IF NOT EXISTS books (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL UNIQUE,
  short_description VARCHAR(512) NULL,
  full_description TEXT NULL,
  price NUMERIC(12,2) NOT NULL DEFAULT 0.00,
  currency CHAR(3) NOT NULL DEFAULT 'EUR',
  author_id BIGINT NOT NULL,
  main_category_id BIGINT NOT NULL,
  isbn VARCHAR(32) NULL,
  language CHAR(5) NULL,
  pages INTEGER NULL,
  publisher VARCHAR(255) NULL,
  published_at DATE NULL,
  sku VARCHAR(64) NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  is_available BOOLEAN NOT NULL DEFAULT TRUE,
  stock_quantity INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_books_version CHECK (version >= 0),
  deleted_at TIMESTAMPTZ(6) NULL,
  CONSTRAINT chk_books_pages      CHECK (pages IS NULL OR pages >= 0),
  CONSTRAINT chk_books_stock_qty  CHECK (stock_quantity >= 0),
  CONSTRAINT chk_books_currency CHECK (currency ~ '^[A-Z]{3}$')
);

-- === cart_items ===
CREATE TABLE IF NOT EXISTS cart_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cart_id CHAR(36) NOT NULL,
  book_id BIGINT NOT NULL,
  sku VARCHAR(64) NULL,
  variant JSONB NULL,
  quantity INTEGER NOT NULL,
  unit_price NUMERIC(12,2) NOT NULL DEFAULT 0.00,
  price_snapshot NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  meta JSONB NULL,
  CONSTRAINT chk_cart_currency CHECK (currency ~ '^[A-Z]{3}$'),
  CONSTRAINT chk_cart_qty CHECK (quantity > 0)
);

-- === carts ===
CREATE TABLE IF NOT EXISTS carts (
  id CHAR(36) PRIMARY KEY,
  user_id BIGINT NULL,
  note VARCHAR(200) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_carts_version CHECK (version >= 0)
);

-- === categories ===
CREATE TABLE IF NOT EXISTS categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL UNIQUE,
  parent_id BIGINT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_categories_version CHECK (version >= 0),
  deleted_at TIMESTAMPTZ(6) NULL
);

-- === countries ===
CREATE TABLE IF NOT EXISTS countries (
  iso2 CHAR(2) PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  CONSTRAINT chk_countries_iso2 CHECK (iso2 ~ '^[A-Z]{2}$')
);

-- === coupon_redemptions ===
CREATE TABLE IF NOT EXISTS coupon_redemptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  coupon_id BIGINT NOT NULL,
  user_id BIGINT NOT NULL,
  order_id BIGINT NOT NULL,
  redeemed_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  amount_applied NUMERIC(12,2) NOT NULL
);

-- === coupons ===
CREATE TABLE IF NOT EXISTS coupons (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code VARCHAR(100) NOT NULL UNIQUE,
  type TEXT NOT NULL,
  value NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NULL,
  starts_at DATE NOT NULL,
  ends_at DATE NULL,
  max_redemptions INTEGER NOT NULL DEFAULT 0,
  min_order_amount NUMERIC(12,2) NULL,
  applies_to JSONB NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_coupon_percent_fixed CHECK (
    (type='percent' AND value BETWEEN 0 AND 100 AND currency IS NULL)
    OR (type='fixed' AND value >= 0 AND (currency ~ '^[A-Z]{3}$'))
  )
);

-- === crypto_keys ===
CREATE TABLE IF NOT EXISTS crypto_keys (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  basename VARCHAR(100) NOT NULL,
  version INTEGER NOT NULL,
  filename VARCHAR(255) NULL,
  file_path VARCHAR(1024) NULL,
  fingerprint CHAR(64) NULL,
  key_meta JSONB NULL,
  key_type TEXT NULL,
  algorithm VARCHAR(64) NULL,
  length_bits SMALLINT NULL,
  origin TEXT NULL,
  "usage" TEXT[] NULL,
  scope VARCHAR(100) NULL,
  status TEXT NOT NULL DEFAULT 'active',
  is_backup_encrypted BOOLEAN NOT NULL DEFAULT FALSE,
  backup_blob BYTEA NULL,
  created_by BIGINT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  activated_at TIMESTAMPTZ(6) NULL,
  retired_at TIMESTAMPTZ(6) NULL,
  replaced_by BIGINT NULL,
  notes TEXT NULL,
  CONSTRAINT uq_keys_basename_version UNIQUE (basename, version),
  CONSTRAINT chk_keys_type    CHECK (key_type IS NULL OR key_type IN ('dek','kek','hmac','pepper')),
  CONSTRAINT chk_keys_origin  CHECK (origin IS NULL OR origin IN ('local','kms','imported')),
  CONSTRAINT chk_keys_status  CHECK (status IN ('active','retired','compromised','archived')),
  CONSTRAINT chk_keys_usage   CHECK ("usage" IS NULL OR "usage" <@ ARRAY['encrypt','decrypt','sign','verify','wrap','unwrap'])
);

-- === email_verifications ===
CREATE TABLE IF NOT EXISTS email_verifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  token_hash CHAR(64) NULL,
  selector CHAR(12) NOT NULL,
  validator_hash BYTEA NULL,
  key_version VARCHAR(64) NULL,
  expires_at TIMESTAMPTZ(6) NOT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  used_at TIMESTAMPTZ(6) NULL
);

-- === encrypted_fields ===
CREATE TABLE IF NOT EXISTS encrypted_fields (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  entity_table VARCHAR(64) NOT NULL,
  entity_pk VARCHAR(64) NOT NULL,
  field_name VARCHAR(64) NOT NULL,
  ciphertext BYTEA NOT NULL,
  meta JSONB NOT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT ux_enc_entity_field UNIQUE (entity_table, entity_pk, field_name)
);

-- === encryption_events ===
CREATE TABLE IF NOT EXISTS encryption_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  entity_table VARCHAR(64) NOT NULL,
  entity_pk VARCHAR(64) NOT NULL,
  field_name VARCHAR(64) NOT NULL,
  op TEXT NOT NULL,
  policy_id BIGINT NULL,
  local_key_version VARCHAR(64) NULL,
  layers JSONB NULL,
  outcome TEXT NOT NULL,
  error_code VARCHAR(64) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_enc_op CHECK (op IN ('encrypt','decrypt','rotate','rehash','unwrap','wrap')),
  CONSTRAINT chk_enc_outcome CHECK (outcome IN ('success','failure'))
);

-- === encryption_policies ===
CREATE TABLE IF NOT EXISTS encryption_policies (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  policy_name VARCHAR(100) NOT NULL UNIQUE,
  mode TEXT NOT NULL,
  layer_selection TEXT NOT NULL DEFAULT 'defined',
  min_layers SMALLINT NOT NULL DEFAULT 1,
  max_layers SMALLINT NOT NULL DEFAULT 3,
  aad_template JSONB NULL,
  notes TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_enc_mode CHECK (mode IN ('local','kms','multi-kms')),
  CONSTRAINT chk_enc_layer_selection CHECK (layer_selection IN ('defined','round_robin','random','hash_mod'))
);

-- === idempotency_keys ===
CREATE TABLE IF NOT EXISTS idempotency_keys (
  key_hash CHAR(64) NOT NULL PRIMARY KEY,
  payment_id BIGINT NULL DEFAULT NULL,
  order_id BIGINT NULL DEFAULT NULL,
  gateway_payload JSONB NULL,
  redirect_url VARCHAR(1024) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  ttl_seconds INTEGER NOT NULL DEFAULT 86400
);

-- === inventory_reservations ===
CREATE TABLE IF NOT EXISTS inventory_reservations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NULL,
  book_id BIGINT NOT NULL,
  quantity INTEGER NOT NULL,
  reserved_until TIMESTAMPTZ(6) NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_reservations_version CHECK (version >= 0),
  CONSTRAINT chk_res_qty CHECK (quantity > 0),
  CONSTRAINT chk_res_status CHECK (status IN ('pending','confirmed','expired','cancelled'))
);

-- === invoice_items ===
CREATE TABLE IF NOT EXISTS invoice_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  invoice_id BIGINT NOT NULL,
  line_no INTEGER NOT NULL,
  description TEXT NOT NULL,
  unit_price NUMERIC(12,2) NOT NULL,
  quantity INTEGER NOT NULL,
  tax_rate NUMERIC(5,2) NOT NULL,
  tax_amount NUMERIC(12,2) NOT NULL,
  line_total NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  CONSTRAINT uq_invoice_line UNIQUE (invoice_id, line_no),
  CONSTRAINT chk_invoice_items_currency CHECK (currency ~ '^[A-Z]{3}$'),
  CONSTRAINT chk_invoice_items_qty CHECK (quantity > 0)
);

-- === invoices ===
CREATE TABLE IF NOT EXISTS invoices (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NULL,
  invoice_number VARCHAR(100) NOT NULL UNIQUE,
  variable_symbol VARCHAR(50) NULL,
  issue_date DATE NOT NULL,
  due_date DATE NULL,
  subtotal NUMERIC(12,2) NOT NULL,
  discount_total NUMERIC(12,2) NOT NULL,
  tax_total NUMERIC(12,2) NOT NULL,
  total NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  qr_data TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_invoices_currency CHECK (currency ~ '^[A-Z]{3}$')
);

-- === jwt_tokens ===
CREATE TABLE IF NOT EXISTS jwt_tokens (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  jti CHAR(36) NOT NULL UNIQUE,
  user_id BIGINT NULL,
  token_hash BYTEA NOT NULL,
  token_hash_algo VARCHAR(50) NULL,
  token_hash_key_version VARCHAR(64) NULL,
  type TEXT NOT NULL DEFAULT 'refresh',
  scopes VARCHAR(255) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_jwt_tokens_version CHECK (version >= 0),
  expires_at TIMESTAMPTZ(6) NULL,
  last_used_at TIMESTAMPTZ(6) NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  replaced_by BIGINT NULL,
  revoked BOOLEAN NOT NULL DEFAULT FALSE,
  meta JSONB NULL,
  CONSTRAINT uq_jwt_token_hash UNIQUE (token_hash),
  CONSTRAINT chk_jwt_type CHECK (type IN ('refresh','api'))
);

-- === key_events ===
CREATE TABLE IF NOT EXISTS key_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  key_id BIGINT NULL,
  basename VARCHAR(100) NULL,
  event_type TEXT NOT NULL,
  actor_id BIGINT NULL,
  job_id BIGINT NULL,
  note TEXT NULL,
  meta JSONB NULL,
  "source" TEXT NOT NULL DEFAULT 'admin',
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_key_events_type CHECK (event_type IN ('created','rotated','activated','retired','compromised','deleted','used_encrypt','used_decrypt','access_failed','backup','restore')),
  CONSTRAINT chk_key_events_source CHECK ("source" IN ('cron','admin','api','manual'))
);

-- === key_rotation_jobs ===
CREATE TABLE IF NOT EXISTS key_rotation_jobs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  basename VARCHAR(100) NOT NULL,
  target_version INTEGER NULL,
  scheduled_at TIMESTAMPTZ(6) NULL,
  started_at TIMESTAMPTZ(6) NULL,
  finished_at TIMESTAMPTZ(6) NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  attempts INTEGER NOT NULL DEFAULT 0,
  executed_by BIGINT NULL,
  result TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_key_rotation_status CHECK (status IN ('pending','running','done','failed','cancelled'))
);

-- === key_usage ===
CREATE TABLE IF NOT EXISTS key_usage (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  key_id BIGINT NOT NULL,
  usage_date DATE NOT NULL,
  encrypt_count INTEGER NOT NULL DEFAULT 0,
  decrypt_count INTEGER NOT NULL DEFAULT 0,
  verify_count  INTEGER NOT NULL DEFAULT 0,
  last_used_at TIMESTAMPTZ(6) NULL,
  CONSTRAINT chk_key_usage_counts CHECK (
    encrypt_count >= 0 AND decrypt_count >= 0 AND verify_count >= 0
  ),
  CONSTRAINT uq_key_usage_key_date UNIQUE (key_id, usage_date)
);

-- === kms_keys ===
CREATE TABLE IF NOT EXISTS kms_keys (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  provider_id BIGINT NOT NULL,
  external_key_ref VARCHAR(512) NOT NULL,
  purpose TEXT NOT NULL DEFAULT 'wrap',
  algorithm VARCHAR(64) NULL,
  status TEXT NOT NULL DEFAULT 'active',
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_kms_purpose CHECK (purpose IN ('wrap','encrypt','both')),
  CONSTRAINT chk_kms_status  CHECK (status  IN ('active','retired','disabled'))
);

-- === kms_providers ===
CREATE TABLE IF NOT EXISTS kms_providers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  provider TEXT NOT NULL,
  location VARCHAR(100) NULL,
  project_tenant VARCHAR(150) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  is_enabled BOOLEAN NOT NULL DEFAULT TRUE,
  CONSTRAINT chk_kms_provider CHECK (provider IN ('gcp','aws','azure','vault'))
);

-- === login_attempts ===
CREATE TABLE IF NOT EXISTS login_attempts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ip_hash BYTEA NOT NULL,
  attempted_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  success BOOLEAN NOT NULL DEFAULT FALSE,
  user_id BIGINT NULL,
  username_hash BYTEA NULL,
  auth_event_id BIGINT NULL,
  CONSTRAINT chk_login_success CHECK (success IN (FALSE, TRUE))
);

-- === newsletter_subscribers ===
CREATE TABLE IF NOT EXISTS newsletter_subscribers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  email_hash BYTEA NOT NULL,
  email_hash_key_version VARCHAR(64) NULL,
  email_enc BYTEA NULL,
  email_key_version VARCHAR(64) NULL,
  confirm_selector CHAR(12) DEFAULT NULL,
  confirm_validator_hash BYTEA DEFAULT NULL,
  confirm_key_version VARCHAR(64) DEFAULT NULL,
  confirm_expires TIMESTAMPTZ(6) DEFAULT NULL,
  confirmed_at TIMESTAMPTZ(6) DEFAULT NULL,
  unsubscribe_token_hash BYTEA DEFAULT NULL,
  unsubscribe_token_key_version VARCHAR(64) DEFAULT NULL,
  unsubscribed_at TIMESTAMPTZ(6) DEFAULT NULL,
  origin VARCHAR(100) DEFAULT NULL,
  ip_hash BYTEA DEFAULT NULL,
  ip_hash_key_version VARCHAR(64) DEFAULT NULL,
  meta JSONB DEFAULT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_ns_version CHECK (version >= 0)
);

-- === notifications ===
CREATE TABLE IF NOT EXISTS notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  channel TEXT NOT NULL,
  template VARCHAR(100) NOT NULL,
  payload JSONB NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  retries INTEGER NOT NULL DEFAULT 0,
  max_retries INTEGER NOT NULL DEFAULT 6,
  next_attempt_at TIMESTAMPTZ(6) NULL,
  scheduled_at TIMESTAMPTZ(6) NULL,
  sent_at TIMESTAMPTZ(6) NULL,
  error TEXT NULL,
  last_attempt_at TIMESTAMPTZ(6) NULL,
  locked_until TIMESTAMPTZ(6) NULL,
  locked_by VARCHAR(100) NULL,
  priority INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_notifications_version CHECK (version >= 0),
  CONSTRAINT chk_notifications_channel CHECK (channel IN ('email','push')),
  CONSTRAINT chk_notifications_status CHECK (status IN ('pending','processing','sent','failed'))
);

-- === order_item_downloads ===
CREATE TABLE IF NOT EXISTS order_item_downloads (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL,
  book_id BIGINT NOT NULL,
  asset_id BIGINT NOT NULL,
  download_token_hash BYTEA NULL,
  token_key_version VARCHAR(64) NULL,
  key_version VARCHAR(64) NULL,
  max_uses INTEGER NOT NULL,
  used INTEGER NOT NULL DEFAULT 0,
  expires_at TIMESTAMPTZ(6) NOT NULL,
  last_used_at TIMESTAMPTZ(6) NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL
);

-- === order_items ===
CREATE TABLE IF NOT EXISTS order_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NULL,
  book_id BIGINT NULL,
  product_ref INTEGER NULL,
  title_snapshot VARCHAR(255) NOT NULL,
  sku_snapshot VARCHAR(64) NULL,
  unit_price NUMERIC(12,2) NOT NULL,
  quantity INTEGER NOT NULL,
  tax_rate NUMERIC(5,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  CONSTRAINT chk_order_items_qty CHECK (quantity > 0),
  CONSTRAINT chk_order_items_currency CHECK (currency ~ '^[A-Z]{3}$')
);

-- === orders ===
CREATE TABLE IF NOT EXISTS orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid CHAR(36) NOT NULL UNIQUE,
  uuid_bin BYTEA NULL,
  public_order_no VARCHAR(64) NULL,
  user_id BIGINT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  encrypted_customer_blob BYTEA NULL,
  encrypted_customer_blob_key_version VARCHAR(64) NULL,
  encryption_meta JSONB NULL,
  currency CHAR(3) NOT NULL,
  metadata JSONB NULL,
  subtotal NUMERIC(12,2) NOT NULL DEFAULT 0,
  discount_total NUMERIC(12,2) NOT NULL DEFAULT 0,
  tax_total NUMERIC(12,2) NOT NULL DEFAULT 0,
  total NUMERIC(12,2) NOT NULL DEFAULT 0,
  payment_method VARCHAR(100) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_orders_version CHECK (version >= 0),
  CONSTRAINT chk_orders_status CHECK (status IN ('pending','paid','failed','cancelled','refunded','completed')),
  CONSTRAINT chk_orders_currency CHECK (currency ~ '^[A-Z]{3}$'),
  CONSTRAINT ux_orders_uuid_bin UNIQUE (uuid_bin)
);

-- === payment_gateway_notifications ===
CREATE TABLE IF NOT EXISTS payment_gateway_notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  transaction_id VARCHAR(255) NOT NULL,
  received_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_pg_notify_version CHECK (version >= 0),
  processing_by VARCHAR(100) NULL,
  processing_until TIMESTAMPTZ(6) NULL,
  attempts INTEGER NOT NULL DEFAULT 0,
  last_error VARCHAR(255) NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  CONSTRAINT ux_pg_notify_tx UNIQUE (transaction_id),
  CONSTRAINT chk_pg_notify_status CHECK (status IN ('pending','processing','done','failed')),
  CONSTRAINT chk_pg_notify_attempts CHECK (attempts >= 0)
);

-- === payment_logs ===
CREATE TABLE IF NOT EXISTS payment_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  payment_id BIGINT NOT NULL,
  log_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  message TEXT NOT NULL
);

-- === payment_webhooks ===
CREATE TABLE IF NOT EXISTS payment_webhooks (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  payment_id BIGINT NULL,
  gateway_event_id VARCHAR(255) NULL,
  payload_hash CHAR(64) NOT NULL,
  payload JSONB NULL,
  from_cache BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);

-- === payments ===
CREATE TABLE IF NOT EXISTS payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NULL,
  gateway VARCHAR(100) NOT NULL,
  transaction_id VARCHAR(255) NULL,
  provider_event_id VARCHAR(255) NULL,
  status TEXT NOT NULL,
  amount NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  details JSONB NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_payments_version CHECK (version >= 0),
  CONSTRAINT uq_payments_transaction_id UNIQUE (transaction_id),
  CONSTRAINT chk_payments_status CHECK (status IN ('initiated','pending','authorized','paid','cancelled','partially_refunded','refunded','failed')),
  CONSTRAINT chk_payments_currency CHECK (currency ~ '^[A-Z]{3}$')
);

-- === permissions ===
CREATE TABLE IF NOT EXISTS permissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);

-- === policy_kms_keys ===
CREATE TABLE IF NOT EXISTS policy_kms_keys (
  policy_id BIGINT NOT NULL,
  kms_key_id BIGINT NOT NULL,
  weight INTEGER NOT NULL DEFAULT 1,
  priority INTEGER NOT NULL DEFAULT 0,
  PRIMARY KEY (policy_id, kms_key_id)
);

-- === refunds ===
CREATE TABLE IF NOT EXISTS refunds (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  payment_id BIGINT NOT NULL,
  amount NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  reason TEXT NULL,
  status VARCHAR(50) NOT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  details JSONB NULL,
  CONSTRAINT chk_refunds_currency CHECK (currency ~ '^[A-Z]{3}$')
);

-- === register_events ===
CREATE TABLE IF NOT EXISTS register_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  type TEXT NOT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  occurred_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  meta JSONB NULL,
  CONSTRAINT chk_register_type CHECK (type IN ('register_success','register_failure'))
);

-- === reviews ===
CREATE TABLE IF NOT EXISTS reviews (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  book_id BIGINT NOT NULL,
  user_id BIGINT NULL,
  rating SMALLINT NOT NULL,
  review_text TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NULL,
  CONSTRAINT chk_reviews_rating CHECK (rating BETWEEN 1 AND 5)
);

-- === session_audit ===
CREATE TABLE IF NOT EXISTS session_audit (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_token BYTEA NULL,
  session_token_key_version VARCHAR(64) NULL,
  csrf_key_version VARCHAR(64) NULL,
  session_id VARCHAR(128) NULL,
  event VARCHAR(64) NOT NULL,
  user_id BIGINT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  meta_json JSONB NULL,
  outcome VARCHAR(32) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);

-- === sessions ===
CREATE TABLE IF NOT EXISTS sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  token_hash BYTEA NOT NULL,
  token_hash_key_version VARCHAR(64) NULL,
  token_fingerprint BYTEA NULL,
  token_issued_at TIMESTAMPTZ(6) NULL,
  user_id BIGINT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_sessions_version CHECK (version >= 0),
  last_seen_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  expires_at TIMESTAMPTZ(6) NULL,
  failed_decrypt_count INTEGER NOT NULL DEFAULT 0,
  last_failed_decrypt_at TIMESTAMPTZ(6) NULL,
  revoked BOOLEAN NOT NULL DEFAULT FALSE,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  session_blob BYTEA NULL,
  CONSTRAINT uq_sessions_token_hash UNIQUE (token_hash),
  CONSTRAINT chk_sessions_failed_decrypt_count CHECK (failed_decrypt_count >= 0)
);

-- === system_errors ===
CREATE TABLE IF NOT EXISTS system_errors (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  level TEXT NOT NULL,
  message TEXT NOT NULL,
  exception_class VARCHAR(255) NULL,
  file VARCHAR(1024) NULL,
  line INTEGER NULL,
  stack_trace TEXT NULL,
  token VARCHAR(255) NULL,
  context JSONB NULL,
  fingerprint VARCHAR(64) NULL,
  occurrences INTEGER NOT NULL DEFAULT 1,
  CONSTRAINT chk_system_errors_occurrences CHECK (occurrences >= 0),
  user_id BIGINT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  ip_text VARCHAR(45) NULL,
  ip_bin BYTEA NULL,
  user_agent VARCHAR(1024) NULL,
  url VARCHAR(2048) NULL,
  method VARCHAR(10) NULL,
  http_status SMALLINT NULL,
  resolved BOOLEAN NOT NULL DEFAULT FALSE,
  resolved_by BIGINT NULL,
  resolved_at TIMESTAMPTZ(6) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  last_seen TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_err_level CHECK (level IN ('notice','warning','error','critical')),
  CONSTRAINT uq_err_fp UNIQUE (fingerprint),
  CONSTRAINT chk_system_errors_http_status CHECK (http_status IS NULL OR http_status >= 0)
);

-- === system_jobs ===
CREATE TABLE IF NOT EXISTS system_jobs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  job_type VARCHAR(100) NOT NULL,
  payload JSONB NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  retries INTEGER NOT NULL DEFAULT 0,
  scheduled_at TIMESTAMPTZ(6) NULL,
  started_at TIMESTAMPTZ(6) NULL,
  finished_at TIMESTAMPTZ(6) NULL,
  error TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_system_jobs_version CHECK (version >= 0),
  CONSTRAINT chk_system_jobs_status CHECK (status IN ('pending','processing','done','failed'))
);

-- === tax_rates ===
CREATE TABLE IF NOT EXISTS tax_rates (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  country_iso2 CHAR(2) NOT NULL,
  category TEXT NOT NULL,
  rate NUMERIC(5,2) NOT NULL,
  valid_from DATE NOT NULL,
  valid_to DATE NULL,
  CONSTRAINT chk_tax_category CHECK (category IN ('ebook','physical'))
);

-- === two_factor ===
CREATE TABLE IF NOT EXISTS two_factor (
  user_id BIGINT NOT NULL,
  method VARCHAR(50) NOT NULL,
  secret BYTEA NULL,
  recovery_codes_enc BYTEA NULL,
  hotp_counter BIGINT NULL,
  enabled BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_two_factor_version CHECK (version >= 0),
  last_used_at TIMESTAMPTZ(6) NULL,
  PRIMARY KEY (user_id, method),
  CONSTRAINT chk_two_factor_hotp_counter CHECK (hotp_counter IS NULL OR hotp_counter >= 0)
);

-- === user_consents ===
CREATE TABLE IF NOT EXISTS user_consents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  consent_type VARCHAR(50) NOT NULL,
  version VARCHAR(50) NOT NULL,
  granted BOOLEAN NOT NULL,
  granted_at TIMESTAMPTZ(6) NOT NULL,
  source VARCHAR(100) NULL,
  meta JSONB NULL
);

-- === user_identities ===
CREATE TABLE IF NOT EXISTS user_identities (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  provider VARCHAR(100) NOT NULL,
  provider_user_id VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);

-- === user_profiles ===
CREATE TABLE IF NOT EXISTS user_profiles (
  user_id BIGINT PRIMARY KEY,
  profile_enc BYTEA NULL,
  key_version VARCHAR(64) NULL,
  encryption_meta JSONB NULL,
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_user_profiles_version CHECK (version >= 0)
);

-- === users ===
CREATE TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email_hash BYTEA NULL,
  email_hash_key_version VARCHAR(64) NULL,
  password_hash VARCHAR(255) NOT NULL,
  password_algo VARCHAR(64) NULL,
  password_key_version VARCHAR(64) NULL,
  is_active BOOLEAN NOT NULL DEFAULT FALSE,
  is_locked  BOOLEAN NOT NULL DEFAULT FALSE,
  failed_logins INTEGER NOT NULL DEFAULT 0,
  must_change_password BOOLEAN NOT NULL DEFAULT FALSE,
  last_login_at TIMESTAMPTZ(6) NULL,
  last_login_ip_hash BYTEA NULL,
  last_login_ip_key_version VARCHAR(64) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_users_version CHECK (version >= 0),
  deleted_at TIMESTAMPTZ(6) NULL,
  actor_role TEXT NOT NULL DEFAULT 'customer',
  CONSTRAINT chk_users_actor_role CHECK (actor_role IN ('customer','admin'))
);

-- === vat_validations ===
CREATE TABLE IF NOT EXISTS vat_validations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  vat_id VARCHAR(50) NOT NULL,
  country_iso2 CHAR(2) NOT NULL,
  valid BOOLEAN NOT NULL,
  checked_at TIMESTAMPTZ(6) NOT NULL,
  raw JSONB NULL
);

-- === verify_events ===
CREATE TABLE IF NOT EXISTS verify_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  type TEXT NOT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  occurred_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  meta JSONB NULL,
  CONSTRAINT chk_verify_type CHECK (type IN ('verify_success','verify_failure'))
);

-- === webhook_outbox ===
CREATE TABLE IF NOT EXISTS webhook_outbox (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_type VARCHAR(100) NOT NULL,
  payload JSONB NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  retries INTEGER NOT NULL DEFAULT 0,
  next_attempt_at TIMESTAMPTZ(6) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  version INTEGER NOT NULL DEFAULT 0,
  CONSTRAINT chk_webhook_outbox_version CHECK (version >= 0),
  CONSTRAINT chk_webhook_status CHECK (status IN ('pending','sent','failed'))
);

-- === worker_locks ===
CREATE TABLE IF NOT EXISTS worker_locks (
  name VARCHAR(191) NOT NULL PRIMARY KEY,
  locked_until TIMESTAMPTZ(6) NOT NULL
);


