@{
  FormatVersion = '1.0'

  Tables = @{

    users = @{
      create = @'
CREATE TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email_hash BYTEA NULL,
  email_hash_key_version VARCHAR(64) NULL,
  password_hash VARCHAR(255) NOT NULL,
  password_algo VARCHAR(64) NULL,
  password_key_version VARCHAR(64) NULL,
  is_active BOOLEAN NOT NULL DEFAULT FALSE,
  is_locked  BOOLEAN NOT NULL DEFAULT FALSE,
  failed_logins INTEGER NOT NULL DEFAULT 0,
  must_change_password BOOLEAN NOT NULL DEFAULT FALSE,
  last_login_at TIMESTAMPTZ(6) NULL,
  last_login_ip_hash BYTEA NULL,
  last_login_ip_key_version VARCHAR(64) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  deleted_at TIMESTAMPTZ(6) NULL,
  actor_role TEXT NOT NULL DEFAULT 'customer',
  CONSTRAINT chk_users_actor_role CHECK (actor_role IN ('customer','admin'))
);
'@
      indexes = @(
        'CREATE INDEX idx_users_last_login_at ON users (last_login_at)',
        'CREATE INDEX idx_users_is_active ON users (is_active)',
        'CREATE INDEX idx_users_actor_role ON users (actor_role)',
        'CREATE INDEX idx_users_last_login_ip_hash ON users (last_login_ip_hash)',
        'CREATE UNIQUE INDEX ux_users_email_hash ON users (email_hash)'
      )
      foreign_keys = @()
    }

    login_attempts = @{
      create = @'
CREATE TABLE IF NOT EXISTS login_attempts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ip_hash BYTEA NOT NULL,
  attempted_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  success BOOLEAN NOT NULL DEFAULT FALSE,
  user_id BIGINT NULL,
  username_hash BYTEA NULL,
  auth_event_id BIGINT NULL
);
'@
      indexes = @(
        'CREATE INDEX idx_login_ip_success_time ON login_attempts (ip_hash, success, attempted_at)',
        'CREATE INDEX idx_login_attempted_at ON login_attempts (attempted_at)',
        'CREATE INDEX idx_login_username_hash ON login_attempts (username_hash)',
        'CREATE INDEX idx_login_user_time ON login_attempts (user_id, attempted_at)'
      )
      foreign_keys = @(
        'ALTER TABLE login_attempts ADD CONSTRAINT fk_login_attempts_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL',
        'ALTER TABLE login_attempts ADD CONSTRAINT fk_login_attempts_auth_event FOREIGN KEY (auth_event_id) REFERENCES auth_events(id) ON DELETE SET NULL'
      )
    }

    user_profiles = @{
      create = @'
CREATE TABLE IF NOT EXISTS user_profiles (
  user_id BIGINT PRIMARY KEY,
  profile_enc BYTEA NULL,
  key_version VARCHAR(64) NULL,
  encryption_meta JSONB NULL,
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE user_profiles ADD CONSTRAINT fk_user_profiles_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE'
      )
    }

    user_identities = @{
      create = @'
CREATE TABLE IF NOT EXISTS user_identities (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  provider VARCHAR(100) NOT NULL,
  provider_user_id VARCHAR(255) NOT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);
'@
      indexes = @(
        'CREATE UNIQUE INDEX ux_provider_user ON user_identities (provider, provider_user_id)',
        'CREATE INDEX idx_user_identities_user ON user_identities (user_id)'
      )
      foreign_keys = @(
        'ALTER TABLE user_identities ADD CONSTRAINT fk_user_identities_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE'
      )
    }

    permissions = @{
      create = @'
CREATE TABLE IF NOT EXISTS permissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);
'@
      indexes = @()
      foreign_keys = @()
    }

    two_factor = @{
      create = @'
CREATE TABLE IF NOT EXISTS two_factor (
  user_id BIGINT NOT NULL,
  method VARCHAR(50) NOT NULL,
  secret BYTEA NULL,
  recovery_codes_enc BYTEA NULL,
  hotp_counter BIGINT NULL,
  enabled BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  last_used_at TIMESTAMPTZ(6) NULL,
  PRIMARY KEY (user_id, method)
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE two_factor ADD CONSTRAINT fk_two_factor_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE'
      )
    }

    session_audit = @{
      create = @'
CREATE TABLE IF NOT EXISTS session_audit (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_token BYTEA NULL,
  session_token_key_version VARCHAR(64) NULL,
  csrf_key_version VARCHAR(64) NULL,
  session_id VARCHAR(128) NULL,
  event VARCHAR(64) NOT NULL,
  user_id BIGINT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  meta_json JSONB NULL,
  outcome VARCHAR(32) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);
'@
      indexes = @(
        'CREATE INDEX idx_session_audit_token ON session_audit (session_token)',
        'CREATE INDEX idx_session_audit_session_id ON session_audit (session_id)',
        'CREATE INDEX idx_session_audit_user_id ON session_audit (user_id)',
        'CREATE INDEX idx_session_audit_created_at ON session_audit (created_at)',
        'CREATE INDEX idx_session_audit_event ON session_audit (event)',
        'CREATE INDEX idx_session_audit_ip_hash ON session_audit (ip_hash)',
        'CREATE INDEX idx_session_audit_ip_key ON session_audit (ip_hash_key_version)',
        'CREATE INDEX idx_session_audit_event_time ON session_audit (event, created_at)',
        'CREATE INDEX idx_session_audit_user_event_time ON session_audit (user_id, event, created_at)',
        'CREATE INDEX idx_session_audit_token_time ON session_audit (session_token, created_at)'
      )
      foreign_keys = @(
        'ALTER TABLE session_audit ADD CONSTRAINT fk_session_audit_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    sessions = @{
      create = @'
CREATE TABLE IF NOT EXISTS sessions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  token_hash BYTEA NOT NULL,
  token_hash_key_version VARCHAR(64) NULL,
  token_fingerprint BYTEA NULL,
  token_issued_at TIMESTAMPTZ(6) NULL,
  user_id BIGINT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  last_seen_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  expires_at TIMESTAMPTZ(6) NULL,
  failed_decrypt_count INTEGER NOT NULL DEFAULT 0,
  last_failed_decrypt_at TIMESTAMPTZ(6) NULL,
  revoked BOOLEAN NOT NULL DEFAULT FALSE,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  session_blob BYTEA NULL,
  CONSTRAINT uq_sessions_token_hash UNIQUE (token_hash)
);
'@
      indexes = @(
        'CREATE INDEX idx_sessions_user_created ON sessions (user_id, created_at)',
        'CREATE INDEX idx_sessions_user ON sessions (user_id)',
        'CREATE INDEX idx_sessions_expires_at ON sessions (expires_at)',
        'CREATE INDEX idx_sessions_last_seen ON sessions (last_seen_at)',
        'CREATE INDEX idx_sessions_token_hash_key ON sessions (token_hash_key_version)',
        'CREATE INDEX idx_sessions_created_at ON sessions (created_at)'
      )
      foreign_keys = @(
        'ALTER TABLE sessions ADD CONSTRAINT fk_sessions_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    auth_events = @{
      create = @'
CREATE TABLE IF NOT EXISTS auth_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  type TEXT NOT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  occurred_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  meta JSONB NULL,
  meta_email TEXT GENERATED ALWAYS AS (meta ->> 'email') STORED,
  CONSTRAINT chk_auth_type CHECK (type IN ('login_success','login_failure','logout','password_reset','lockout'))
);
'@
      indexes = @(
        'CREATE INDEX idx_auth_meta_email ON auth_events (meta_email)',
        'CREATE INDEX idx_auth_user ON auth_events (user_id)',
        'CREATE INDEX idx_auth_time ON auth_events (occurred_at)',
        'CREATE INDEX idx_auth_type_time ON auth_events (type, occurred_at)',
        'CREATE INDEX idx_auth_ip_hash ON auth_events (ip_hash)'
      )
      foreign_keys = @(
        'ALTER TABLE auth_events ADD CONSTRAINT fk_auth_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    register_events = @{
      create = @'
CREATE TABLE IF NOT EXISTS register_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  type TEXT NOT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  occurred_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  meta JSONB NULL,
  CONSTRAINT chk_register_type CHECK (type IN ('register_success','register_failure'))
);
'@
      indexes = @(
        'CREATE INDEX idx_reg_user ON register_events (user_id)',
        'CREATE INDEX idx_reg_time ON register_events (occurred_at)',
        'CREATE INDEX idx_reg_type_time ON register_events (type, occurred_at)',
        'CREATE INDEX idx_reg_ip ON register_events (ip_hash)'
      )
      foreign_keys = @(
        'ALTER TABLE register_events ADD CONSTRAINT fk_register_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    verify_events = @{
      create = @'
CREATE TABLE IF NOT EXISTS verify_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  type TEXT NOT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  user_agent VARCHAR(1024) NULL,
  occurred_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  meta JSONB NULL,
  CONSTRAINT chk_verify_type CHECK (type IN ('verify_success','verify_failure'))
);
'@
      indexes = @(
        'CREATE INDEX idx_ver_user ON verify_events (user_id)',
        'CREATE INDEX idx_ver_time ON verify_events (occurred_at)',
        'CREATE INDEX idx_ver_type_time ON verify_events (type, occurred_at)',
        'CREATE INDEX idx_ver_ip ON verify_events (ip_hash)'
      )
      foreign_keys = @(
        'ALTER TABLE verify_events ADD CONSTRAINT fk_verify_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    system_errors = @{
      create = @'
CREATE TABLE IF NOT EXISTS system_errors (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  level TEXT NOT NULL,
  message TEXT NOT NULL,
  exception_class VARCHAR(255) NULL,
  file VARCHAR(1024) NULL,
  line INTEGER NULL,
  stack_trace TEXT NULL,
  token VARCHAR(255) NULL,
  context JSONB NULL,
  fingerprint VARCHAR(64) NULL,
  occurrences INTEGER NOT NULL DEFAULT 1,
  user_id BIGINT NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  ip_text VARCHAR(45) NULL,
  ip_bin BYTEA NULL,
  user_agent VARCHAR(1024) NULL,
  url VARCHAR(2048) NULL,
  method VARCHAR(10) NULL,
  http_status SMALLINT NULL,
  resolved BOOLEAN NOT NULL DEFAULT FALSE,
  resolved_by BIGINT NULL,
  resolved_at TIMESTAMPTZ(6) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  last_seen TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_err_level CHECK (level IN ('notice','warning','error','critical')),
  CONSTRAINT uq_err_fp UNIQUE (fingerprint)
);
'@
      indexes = @(
        'CREATE INDEX idx_err_level ON system_errors (level)',
        'CREATE INDEX idx_err_time ON system_errors (created_at)',
        'CREATE INDEX idx_err_user ON system_errors (user_id)',
        'CREATE INDEX idx_err_ip ON system_errors (ip_hash)',
        'CREATE INDEX idx_err_resolved ON system_errors (resolved)',
        'CREATE INDEX idx_system_errors_last_seen ON system_errors (last_seen)'
      )
      foreign_keys = @(
        'ALTER TABLE system_errors ADD CONSTRAINT fk_err_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL',
        'ALTER TABLE system_errors ADD CONSTRAINT fk_err_resolved_by FOREIGN KEY (resolved_by) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    user_consents = @{
      create = @'
CREATE TABLE IF NOT EXISTS user_consents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  consent_type VARCHAR(50) NOT NULL,
  version VARCHAR(50) NOT NULL,
  granted BOOLEAN NOT NULL,
  granted_at TIMESTAMPTZ(6) NOT NULL,
  source VARCHAR(100) NULL,
  meta JSONB NULL
);
'@
      indexes = @(
        'CREATE INDEX idx_user_consents_user ON user_consents (user_id)'
      )
      foreign_keys = @(
        'ALTER TABLE user_consents ADD CONSTRAINT fk_user_consents_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE'
      )
    }

    authors = @{
      create = @'
CREATE TABLE IF NOT EXISTS authors (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL UNIQUE,
  bio TEXT NULL,
  photo_url VARCHAR(255) NULL,
  story TEXT NULL,
  books_count INTEGER NOT NULL DEFAULT 0,
  ratings_count INTEGER NOT NULL DEFAULT 0,
  rating_sum INTEGER NOT NULL DEFAULT 0,
  avg_rating NUMERIC(3,2) NULL DEFAULT NULL,
  last_rating_at TIMESTAMPTZ(6) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  deleted_at TIMESTAMPTZ(6) NULL
);
'@
      indexes = @(
        'CREATE INDEX idx_authors_avg_rating ON authors (avg_rating)',
        'CREATE INDEX idx_authors_books_count ON authors (books_count)'
      )
      foreign_keys = @()
    }

    categories = @{
      create = @'
CREATE TABLE IF NOT EXISTS categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL UNIQUE,
  parent_id BIGINT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  deleted_at TIMESTAMPTZ(6) NULL
);
'@
      indexes = @(
        'CREATE INDEX idx_categories_parent ON categories (parent_id)'
      )
      foreign_keys = @(
        'ALTER TABLE categories ADD CONSTRAINT fk_categories_parent FOREIGN KEY (parent_id) REFERENCES categories(id) ON DELETE SET NULL'
      )
    }

    books = @{
      create = @'
CREATE TABLE IF NOT EXISTS books (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL UNIQUE,
  short_description VARCHAR(512) NULL,
  full_description TEXT NULL,
  price NUMERIC(12,2) NOT NULL DEFAULT 0.00,
  currency CHAR(3) NOT NULL DEFAULT 'EUR',
  author_id BIGINT NOT NULL,
  main_category_id BIGINT NOT NULL,
  isbn VARCHAR(32) NULL,
  language CHAR(5) NULL,
  pages INTEGER NULL,
  publisher VARCHAR(255) NULL,
  published_at DATE NULL,
  sku VARCHAR(64) NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  is_available BOOLEAN NOT NULL DEFAULT TRUE,
  stock_quantity INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  deleted_at TIMESTAMPTZ(6) NULL,
  CONSTRAINT chk_books_currency CHECK (currency ~ '^[A-Z]{3}$')
);
'@
      indexes = @(
        'CREATE INDEX idx_books_author_id ON books (author_id)',
        'CREATE INDEX idx_books_main_category_id ON books (main_category_id)',
        'CREATE INDEX idx_books_sku ON books (sku)'
      )
      foreign_keys = @(
        'ALTER TABLE books ADD CONSTRAINT fk_books_author FOREIGN KEY (author_id) REFERENCES authors(id) ON DELETE RESTRICT',
        'ALTER TABLE books ADD CONSTRAINT fk_books_category FOREIGN KEY (main_category_id) REFERENCES categories(id) ON DELETE RESTRICT'
      )
    }

    reviews = @{
      create = @'
CREATE TABLE IF NOT EXISTS reviews (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  book_id BIGINT NOT NULL,
  user_id BIGINT NULL,
  rating SMALLINT NOT NULL,
  review_text TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NULL,
  CONSTRAINT chk_reviews_rating CHECK (rating BETWEEN 1 AND 5)
);
'@
      indexes = @(
        'CREATE INDEX idx_reviews_book_id ON reviews (book_id)',
        'CREATE INDEX idx_reviews_created_at ON reviews (created_at)'
      )
      foreign_keys = @(
        'ALTER TABLE reviews ADD CONSTRAINT fk_reviews_book FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE',
        'ALTER TABLE reviews ADD CONSTRAINT fk_reviews_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    crypto_keys = @{
      create = @'
CREATE TABLE IF NOT EXISTS crypto_keys (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  basename VARCHAR(100) NOT NULL,
  version INTEGER NOT NULL,
  filename VARCHAR(255) NULL,
  file_path VARCHAR(1024) NULL,
  fingerprint CHAR(64) NULL,
  key_meta JSONB NULL,
  key_type TEXT NULL,
  algorithm VARCHAR(64) NULL,
  length_bits SMALLINT NULL,
  origin TEXT NULL,
  "usage" TEXT[] NULL,
  scope VARCHAR(100) NULL,
  status TEXT NOT NULL DEFAULT 'active',
  is_backup_encrypted BOOLEAN NOT NULL DEFAULT FALSE,
  backup_blob BYTEA NULL,
  created_by BIGINT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  activated_at TIMESTAMPTZ(6) NULL,
  retired_at TIMESTAMPTZ(6) NULL,
  replaced_by BIGINT NULL,
  notes TEXT NULL,
  CONSTRAINT uq_keys_basename_version UNIQUE (basename, version),
  CONSTRAINT chk_keys_type    CHECK (key_type IS NULL OR key_type IN ('dek','kek','hmac','pepper')),
  CONSTRAINT chk_keys_origin  CHECK (origin IS NULL OR origin IN ('local','kms','imported')),
  CONSTRAINT chk_keys_status  CHECK (status IN ('active','retired','compromised','archived')),
  CONSTRAINT chk_keys_usage   CHECK (usage IS NULL OR usage <@ ARRAY['encrypt','decrypt','sign','verify','wrap','unwrap'])
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE crypto_keys ADD CONSTRAINT fk_keys_created_by FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL',
        'ALTER TABLE crypto_keys ADD CONSTRAINT fk_keys_replaced_by FOREIGN KEY (replaced_by) REFERENCES crypto_keys(id) ON DELETE SET NULL'
      )
    }

    key_events = @{
      create = @'
CREATE TABLE IF NOT EXISTS key_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  key_id BIGINT NULL,
  basename VARCHAR(100) NULL,
  event_type TEXT NOT NULL,
  actor_id BIGINT NULL,
  job_id BIGINT NULL,
  note TEXT NULL,
  meta JSONB NULL,
  "source" TEXT NOT NULL DEFAULT 'admin',
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_key_events_type CHECK (event_type IN ('created','rotated','activated','retired','compromised','deleted','used_encrypt','used_decrypt','access_failed','backup','restore')),
  CONSTRAINT chk_key_events_source CHECK (source IN ('cron','admin','api','manual'))
);
'@
      indexes = @(
        'CREATE INDEX idx_key_events_key_created ON key_events (key_id, created_at)',
        'CREATE INDEX idx_key_events_basename ON key_events (basename)'
      )
      foreign_keys = @(
        'ALTER TABLE key_events ADD CONSTRAINT fk_key_events_key FOREIGN KEY (key_id) REFERENCES crypto_keys(id) ON DELETE SET NULL',
        'ALTER TABLE key_events ADD CONSTRAINT fk_key_events_actor FOREIGN KEY (actor_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    key_rotation_jobs = @{
      create = @'
CREATE TABLE IF NOT EXISTS key_rotation_jobs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  basename VARCHAR(100) NOT NULL,
  target_version INTEGER NULL,
  scheduled_at TIMESTAMPTZ(6) NULL,
  started_at TIMESTAMPTZ(6) NULL,
  finished_at TIMESTAMPTZ(6) NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  attempts INTEGER NOT NULL DEFAULT 0,
  executed_by BIGINT NULL,
  result TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_key_rotation_status CHECK (status IN ('pending','running','done','failed','cancelled'))
);
'@
      indexes = @(
        'CREATE INDEX idx_key_rotation_jobs_basename_sched ON key_rotation_jobs (basename, scheduled_at)'
      )
      foreign_keys = @(
        'ALTER TABLE key_rotation_jobs ADD CONSTRAINT fk_key_rotation_jobs_user FOREIGN KEY (executed_by) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    key_usage = @{
      create = @'
CREATE TABLE IF NOT EXISTS key_usage (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  key_id BIGINT NOT NULL,
  "date" DATE NOT NULL,
  encrypt_count INTEGER NOT NULL DEFAULT 0,
  decrypt_count INTEGER NOT NULL DEFAULT 0,
  verify_count  INTEGER NOT NULL DEFAULT 0,
  last_used_at TIMESTAMPTZ(6) NULL,
  CONSTRAINT uq_key_usage_key_date UNIQUE (key_id, "date")
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE key_usage ADD CONSTRAINT fk_key_usage_key FOREIGN KEY (key_id) REFERENCES crypto_keys(id) ON DELETE CASCADE'
      )
    }

    jwt_tokens = @{
      create = @'
CREATE TABLE IF NOT EXISTS jwt_tokens (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  jti CHAR(36) NOT NULL UNIQUE,
  user_id BIGINT NULL,
  token_hash BYTEA NOT NULL,
  token_hash_algo VARCHAR(50) NULL,
  token_hash_key_version VARCHAR(64) NULL,
  type TEXT NOT NULL DEFAULT 'refresh',
  scopes VARCHAR(255) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  expires_at TIMESTAMPTZ(6) NULL,
  last_used_at TIMESTAMPTZ(6) NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL,
  replaced_by BIGINT NULL,
  revoked BOOLEAN NOT NULL DEFAULT FALSE,
  meta JSONB NULL,
  CONSTRAINT uq_jwt_token_hash UNIQUE (token_hash),
  CONSTRAINT chk_jwt_type CHECK (type IN ('refresh','api'))
);
'@
      indexes = @(
        'CREATE INDEX idx_jwt_user ON jwt_tokens (user_id)',
        'CREATE INDEX idx_jwt_expires ON jwt_tokens (expires_at)',
        'CREATE INDEX idx_jwt_revoked_user ON jwt_tokens (revoked, user_id)',
        'CREATE INDEX idx_jwt_last_used ON jwt_tokens (last_used_at)'
      )
      foreign_keys = @(
        'ALTER TABLE jwt_tokens ADD CONSTRAINT fk_jwt_tokens_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL',
        'ALTER TABLE jwt_tokens ADD CONSTRAINT fk_jwt_tokens_replaced_by FOREIGN KEY (replaced_by) REFERENCES jwt_tokens(id) ON DELETE SET NULL'
      )
    }

    book_assets = @{
      create = @'
CREATE TABLE IF NOT EXISTS book_assets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  book_id BIGINT NOT NULL,
  asset_type TEXT NOT NULL,
  filename VARCHAR(255) NOT NULL,
  mime_type VARCHAR(100) NOT NULL,
  size_bytes BIGINT NOT NULL,
  storage_path TEXT NULL,
  content_hash VARCHAR(64) NULL,
  download_filename VARCHAR(255) NULL,
  is_encrypted BOOLEAN NOT NULL DEFAULT FALSE,
  encryption_algo VARCHAR(50) NULL,
  encryption_key_enc BYTEA NULL,
  encryption_iv  BYTEA NULL,
  encryption_tag BYTEA NULL,
  encryption_aad BYTEA NULL,
  encryption_meta JSONB NULL,
  key_version VARCHAR(64) NULL,
  key_id BIGINT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_asset_type CHECK (asset_type IN ('cover','pdf','epub','mobi','sample','extra'))
);
'@
      indexes = @(
        'CREATE INDEX idx_book_assets_book ON book_assets (book_id)',
        'CREATE INDEX idx_book_assets_type ON book_assets (asset_type)'
      )
      foreign_keys = @(
        'ALTER TABLE book_assets ADD CONSTRAINT fk_book_assets_key FOREIGN KEY (key_id) REFERENCES crypto_keys(id) ON DELETE SET NULL',
        'ALTER TABLE book_assets ADD CONSTRAINT fk_book_assets_book FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE'
      )
    }

    book_categories = @{
      create = @'
CREATE TABLE IF NOT EXISTS book_categories (
  book_id BIGINT NOT NULL,
  category_id BIGINT NOT NULL,
  PRIMARY KEY (book_id, category_id)
);
'@
      indexes = @(
        'CREATE INDEX idx_book_categories_category ON book_categories (category_id)'
      )
      foreign_keys = @(
        'ALTER TABLE book_categories ADD CONSTRAINT fk_book_categories_book FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE',
        'ALTER TABLE book_categories ADD CONSTRAINT fk_book_categories_category FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE'
      )
    }

    inventory_reservations = @{
      create = @'
CREATE TABLE IF NOT EXISTS inventory_reservations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NULL,
  book_id BIGINT NOT NULL,
  quantity INTEGER NOT NULL,
  reserved_until TIMESTAMPTZ(6) NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_res_qty CHECK (quantity > 0),
  CONSTRAINT chk_res_status CHECK (status IN ('pending','confirmed','expired','cancelled'))
);
'@
      indexes = @(
        'CREATE INDEX idx_res_book ON inventory_reservations (book_id)',
        'CREATE INDEX idx_res_order ON inventory_reservations (order_id)',
        'CREATE INDEX idx_res_status_until ON inventory_reservations (status, reserved_until)'
      )
      foreign_keys = @(
        'ALTER TABLE inventory_reservations ADD CONSTRAINT fk_res_book FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE'
      )
    }

    carts = @{
      create = @'
CREATE TABLE IF NOT EXISTS carts (
  id CHAR(36) PRIMARY KEY,
  user_id BIGINT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE carts ADD CONSTRAINT fk_carts_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    cart_items = @{
      create = @'
CREATE TABLE IF NOT EXISTS cart_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cart_id CHAR(36) NOT NULL,
  book_id BIGINT NOT NULL,
  sku VARCHAR(64) NULL,
  variant JSONB NULL,
  quantity INTEGER NOT NULL,
  unit_price NUMERIC(12,2) NOT NULL DEFAULT 0.00,
  price_snapshot NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  meta JSONB NULL,
  CONSTRAINT chk_cart_currency CHECK (currency ~ '^[A-Z]{3}$'),
  CONSTRAINT chk_cart_qty CHECK (quantity > 0)
);
'@
      indexes = @(
        'CREATE INDEX idx_cart_items_cart_id ON cart_items (cart_id)'
      )
      foreign_keys = @(
        'ALTER TABLE cart_items ADD CONSTRAINT fk_cart_items_cart FOREIGN KEY (cart_id) REFERENCES carts(id) ON DELETE CASCADE',
        'ALTER TABLE cart_items ADD CONSTRAINT fk_cart_items_book FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE'
      )
    }

    orders = @{
      create = @'
CREATE TABLE IF NOT EXISTS orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  uuid CHAR(36) NOT NULL UNIQUE,
  uuid_bin BYTEA NULL,
  public_order_no VARCHAR(64) NULL,
  user_id BIGINT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  encrypted_customer_blob BYTEA NULL,
  encrypted_customer_blob_key_version VARCHAR(64) NULL,
  encryption_meta JSONB NULL,
  currency CHAR(3) NOT NULL,
  metadata JSONB NULL,
  subtotal NUMERIC(12,2) NOT NULL DEFAULT 0,
  discount_total NUMERIC(12,2) NOT NULL DEFAULT 0,
  tax_total NUMERIC(12,2) NOT NULL DEFAULT 0,
  total NUMERIC(12,2) NOT NULL DEFAULT 0,
  payment_method VARCHAR(100) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_orders_status CHECK (status IN ('pending','paid','failed','cancelled','refunded','completed')),
  CONSTRAINT chk_orders_currency CHECK (currency ~ '^[A-Z]{3}$'),
  CONSTRAINT ux_orders_uuid_bin UNIQUE (uuid_bin)
);
'@
      indexes = @(
        'CREATE INDEX idx_orders_user_id ON orders (user_id)',
        'CREATE INDEX idx_orders_status ON orders (status)',
        'CREATE INDEX idx_orders_user_status ON orders (user_id, status)',
        'CREATE INDEX idx_orders_uuid ON orders (uuid)',
        'CREATE INDEX idx_orders_created_at ON orders (created_at)'
      )
      foreign_keys = @(
        'ALTER TABLE orders ADD CONSTRAINT fk_orders_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    order_items = @{
      create = @'
CREATE TABLE IF NOT EXISTS order_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NULL,
  book_id BIGINT NULL,
  product_ref INTEGER NULL,
  title_snapshot VARCHAR(255) NOT NULL,
  sku_snapshot VARCHAR(64) NULL,
  unit_price NUMERIC(12,2) NOT NULL,
  quantity INTEGER NOT NULL,
  tax_rate NUMERIC(5,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  CONSTRAINT chk_order_items_qty CHECK (quantity > 0),
  CONSTRAINT chk_order_items_currency CHECK (currency ~ '^[A-Z]{3}$')
);
'@
      indexes = @(
        'CREATE INDEX idx_order_items_order_id ON order_items (order_id)',
        'CREATE INDEX idx_order_items_book_id ON order_items (book_id)'
      )
      foreign_keys = @(
        'ALTER TABLE order_items ADD CONSTRAINT fk_order_items_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE',
        'ALTER TABLE order_items ADD CONSTRAINT fk_order_items_book FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE SET NULL'
      )
    }

    order_item_downloads = @{
      create = @'
CREATE TABLE IF NOT EXISTS order_item_downloads (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL,
  book_id BIGINT NOT NULL,
  asset_id BIGINT NOT NULL,
  download_token_hash BYTEA NULL,
  token_key_version VARCHAR(64) NULL,
  key_version VARCHAR(64) NULL,
  max_uses INTEGER NOT NULL,
  used INTEGER NOT NULL DEFAULT 0,
  expires_at TIMESTAMPTZ(6) NOT NULL,
  last_used_at TIMESTAMPTZ(6) NULL,
  ip_hash BYTEA NULL,
  ip_hash_key_version VARCHAR(64) NULL
);
'@
      indexes = @(
        'CREATE INDEX idx_oid_download_token_hash ON order_item_downloads (download_token_hash)'
      )
      foreign_keys = @(
        'ALTER TABLE order_item_downloads ADD CONSTRAINT fk_oid_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE',
        'ALTER TABLE order_item_downloads ADD CONSTRAINT fk_oid_book FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE',
        'ALTER TABLE order_item_downloads ADD CONSTRAINT fk_oid_asset FOREIGN KEY (asset_id) REFERENCES book_assets(id) ON DELETE CASCADE'
      )
    }

    invoices = @{
      create = @'
CREATE TABLE IF NOT EXISTS invoices (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NULL,
  invoice_number VARCHAR(100) NOT NULL UNIQUE,
  variable_symbol VARCHAR(50) NULL,
  issue_date DATE NOT NULL,
  due_date DATE NULL,
  subtotal NUMERIC(12,2) NOT NULL,
  discount_total NUMERIC(12,2) NOT NULL,
  tax_total NUMERIC(12,2) NOT NULL,
  total NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  qr_data TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_invoices_currency CHECK (currency ~ '^[A-Z]{3}$')
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE invoices ADD CONSTRAINT fk_invoices_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL'
      )
    }

    invoice_items = @{
      create = @'
CREATE TABLE IF NOT EXISTS invoice_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  invoice_id BIGINT NOT NULL,
  line_no INTEGER NOT NULL,
  description TEXT NOT NULL,
  unit_price NUMERIC(12,2) NOT NULL,
  quantity INTEGER NOT NULL,
  tax_rate NUMERIC(5,2) NOT NULL,
  tax_amount NUMERIC(12,2) NOT NULL,
  line_total NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  CONSTRAINT uq_invoice_line UNIQUE (invoice_id, line_no),
  CONSTRAINT chk_invoice_items_currency CHECK (currency ~ '^[A-Z]{3}$'),
  CONSTRAINT chk_invoice_items_qty CHECK (quantity > 0)
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE invoice_items ADD CONSTRAINT fk_invoice_items_invoice FOREIGN KEY (invoice_id) REFERENCES invoices(id) ON DELETE CASCADE'
      )
    }

    payments = @{
      create = @'
CREATE TABLE IF NOT EXISTS payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NULL,
  gateway VARCHAR(100) NOT NULL,
  transaction_id VARCHAR(255) NULL,
  provider_event_id VARCHAR(255) NULL,
  status TEXT NOT NULL,
  amount NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  details JSONB NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT uq_payments_transaction_id UNIQUE (transaction_id),
  CONSTRAINT chk_payments_status CHECK (status IN ('initiated','pending','authorized','paid','cancelled','partially_refunded','refunded','failed')),
  CONSTRAINT chk_payments_currency CHECK (currency ~ '^[A-Z]{3}$')
);
'@
      indexes = @(
        'CREATE INDEX idx_payments_order ON payments (order_id)',
        'CREATE INDEX idx_payments_provider_event ON payments (provider_event_id)',
        'CREATE INDEX idx_payments_created_at ON payments (created_at)'
      )
      foreign_keys = @(
        'ALTER TABLE payments ADD CONSTRAINT fk_payments_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL'
      )
    }

    payment_logs = @{
      create = @'
CREATE TABLE IF NOT EXISTS payment_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  payment_id BIGINT NOT NULL,
  log_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  message TEXT NOT NULL
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE payment_logs ADD CONSTRAINT fk_payment_logs_payment FOREIGN KEY (payment_id) REFERENCES payments(id) ON DELETE CASCADE'
      )
    }

    payment_webhooks = @{
      create = @'
CREATE TABLE IF NOT EXISTS payment_webhooks (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  payment_id BIGINT NULL,
  gateway_event_id VARCHAR(255) NULL,
  payload_hash CHAR(64) NOT NULL,
  payload JSONB NULL,
  from_cache BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);
'@
      indexes = @(
        'CREATE INDEX idx_payment_webhooks_payment ON payment_webhooks (payment_id)',
        'CREATE INDEX idx_payment_webhooks_gw_id ON payment_webhooks (gateway_event_id)',
        'CREATE INDEX idx_payment_webhooks_hash ON payment_webhooks (payload_hash)'
      )
      foreign_keys = @(
        'ALTER TABLE payment_webhooks ADD CONSTRAINT fk_payment_webhooks_payment FOREIGN KEY (payment_id) REFERENCES payments(id) ON DELETE SET NULL'
      )
    }

    idempotency_keys = @{
      create = @'
CREATE TABLE IF NOT EXISTS idempotency_keys (
  key_hash CHAR(64) NOT NULL PRIMARY KEY,
  payment_id BIGINT NULL DEFAULT NULL,
  order_id BIGINT NULL DEFAULT NULL,
  gateway_payload JSONB NULL,
  redirect_url VARCHAR(1024) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  ttl_seconds INTEGER NOT NULL DEFAULT 86400
);
'@
      indexes = @(
        'CREATE INDEX idx_idemp_payment ON idempotency_keys (payment_id)',
        'CREATE INDEX idx_idemp_order ON idempotency_keys (order_id)',
        'CREATE INDEX idx_idemp_created_at ON idempotency_keys (created_at)'
      )
      foreign_keys = @(
        'ALTER TABLE idempotency_keys ADD CONSTRAINT fk_idemp_payment FOREIGN KEY (payment_id) REFERENCES payments(id) ON DELETE SET NULL'
      )
    }

    refunds = @{
      create = @'
CREATE TABLE IF NOT EXISTS refunds (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  payment_id BIGINT NOT NULL,
  amount NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NOT NULL,
  reason TEXT NULL,
  status VARCHAR(50) NOT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  details JSONB NULL,
  CONSTRAINT chk_refunds_currency CHECK (currency ~ '^[A-Z]{3}$')
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE refunds ADD CONSTRAINT fk_refunds_payment FOREIGN KEY (payment_id) REFERENCES payments(id) ON DELETE CASCADE'
      )
    }

    coupons = @{
      create = @'
CREATE TABLE IF NOT EXISTS coupons (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code VARCHAR(100) NOT NULL UNIQUE,
  type TEXT NOT NULL,
  value NUMERIC(12,2) NOT NULL,
  currency CHAR(3) NULL,
  starts_at DATE NOT NULL,
  ends_at DATE NULL,
  max_redemptions INTEGER NOT NULL DEFAULT 0,
  min_order_amount NUMERIC(12,2) NULL,
  applies_to JSONB NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_coupon_percent_fixed CHECK (
    (type='percent' AND value BETWEEN 0 AND 100 AND currency IS NULL)
    OR (type='fixed' AND value >= 0 AND (currency ~ '^[A-Z]{3}$'))
  )
);
'@
      indexes = @()
      foreign_keys = @()
    }

    coupon_redemptions = @{
      create = @'
CREATE TABLE IF NOT EXISTS coupon_redemptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  coupon_id BIGINT NOT NULL,
  user_id BIGINT NOT NULL,
  order_id BIGINT NOT NULL,
  redeemed_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  amount_applied NUMERIC(12,2) NOT NULL
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE coupon_redemptions ADD CONSTRAINT fk_cr_coupon FOREIGN KEY (coupon_id) REFERENCES coupons(id) ON DELETE CASCADE',
        'ALTER TABLE coupon_redemptions ADD CONSTRAINT fk_cr_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE',
        'ALTER TABLE coupon_redemptions ADD CONSTRAINT fk_cr_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE'
      )
    }

    countries = @{
      create = @'
CREATE TABLE IF NOT EXISTS countries (
  iso2 CHAR(2) PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  CONSTRAINT chk_countries_iso2 CHECK (iso2 ~ '^[A-Z]{2}$')
);
'@
      indexes = @()
      foreign_keys = @()
    }

    tax_rates = @{
      create = @'
CREATE TABLE IF NOT EXISTS tax_rates (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  country_iso2 CHAR(2) NOT NULL,
  category TEXT NOT NULL,
  rate NUMERIC(5,2) NOT NULL,
  valid_from DATE NOT NULL,
  valid_to DATE NULL,
  CONSTRAINT chk_tax_category CHECK (category IN ('ebook','physical'))
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE tax_rates ADD CONSTRAINT fk_tax_rates_country FOREIGN KEY (country_iso2) REFERENCES countries(iso2) ON DELETE CASCADE'
      )
    }

    vat_validations = @{
      create = @'
CREATE TABLE IF NOT EXISTS vat_validations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  vat_id VARCHAR(50) NOT NULL,
  country_iso2 CHAR(2) NOT NULL,
  valid BOOLEAN NOT NULL,
  checked_at TIMESTAMPTZ(6) NOT NULL,
  raw JSONB NULL
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE vat_validations ADD CONSTRAINT fk_vat_validations_country FOREIGN KEY (country_iso2) REFERENCES countries(iso2) ON DELETE CASCADE'
      )
    }

    app_settings = @{
      create = @'
CREATE TABLE IF NOT EXISTS app_settings (
  setting_key VARCHAR(100) PRIMARY KEY,
  setting_value TEXT NULL,
  "type" TEXT NOT NULL,
  section VARCHAR(100) NULL,
  description TEXT NULL,
  is_protected BOOLEAN NOT NULL DEFAULT FALSE,
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_by BIGINT NULL,
  CONSTRAINT chk_app_settings_type CHECK (type IN ('string','int','bool','json','secret'))
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE app_settings ADD CONSTRAINT fk_app_settings_user FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    audit_log = @{
      create = @'
CREATE TABLE IF NOT EXISTS audit_log (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  table_name VARCHAR(100) NOT NULL,
  record_id BIGINT NOT NULL,
  changed_by BIGINT NULL,
  change_type TEXT NOT NULL,
  old_value JSONB NULL,
  new_value JSONB NULL,
  changed_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  ip_bin BYTEA NULL,
  user_agent VARCHAR(1024) NULL,
  request_id VARCHAR(100) NULL,
  CONSTRAINT chk_audit_change_type CHECK (change_type IN ('INSERT','UPDATE','DELETE'))
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE audit_log ADD CONSTRAINT fk_audit_log_user FOREIGN KEY (changed_by) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    webhook_outbox = @{
      create = @'
CREATE TABLE IF NOT EXISTS webhook_outbox (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_type VARCHAR(100) NOT NULL,
  payload JSONB NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  retries INTEGER NOT NULL DEFAULT 0,
  next_attempt_at TIMESTAMPTZ(6) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_webhook_status CHECK (status IN ('pending','sent','failed'))
);
'@
      indexes = @(
        'CREATE INDEX idx_webhook_status_scheduled ON webhook_outbox (status, next_attempt_at)',
        'CREATE INDEX idx_webhook_created_at ON webhook_outbox (created_at)'
      )
      foreign_keys = @()
    }

    payment_gateway_notifications = @{
      create = @'
CREATE TABLE IF NOT EXISTS payment_gateway_notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  transaction_id VARCHAR(255) NULL,
  received_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  processing_by VARCHAR(100) NULL,
  processing_until TIMESTAMPTZ(6) NULL,
  attempts INTEGER NOT NULL DEFAULT 0,
  last_error VARCHAR(255) NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  CONSTRAINT ux_pg_notify_tx UNIQUE (transaction_id),
  CONSTRAINT chk_pg_notify_status CHECK (status IN ('pending','processing','done','failed'))
);
'@
      indexes = @(
        'CREATE INDEX idx_pg_notify_status_received ON payment_gateway_notifications (status, received_at)'
      )
      foreign_keys = @(
        'ALTER TABLE payment_gateway_notifications ADD CONSTRAINT fk_pg_notify_payment FOREIGN KEY (transaction_id) REFERENCES payments(transaction_id) ON DELETE CASCADE'
      )
    }

    email_verifications = @{
      create = @'
CREATE TABLE IF NOT EXISTS email_verifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  token_hash CHAR(64) NULL,
  selector CHAR(12) NOT NULL,
  validator_hash BYTEA NULL,
  key_version VARCHAR(64) NULL,
  expires_at TIMESTAMPTZ(6) NOT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  used_at TIMESTAMPTZ(6) NULL
);
'@
      indexes = @(
        'CREATE UNIQUE INDEX ux_ev_selector ON email_verifications (selector)',
        'CREATE INDEX idx_ev_user ON email_verifications (user_id)',
        'CREATE INDEX idx_ev_expires ON email_verifications (expires_at)'
      )
      foreign_keys = @(
        'ALTER TABLE email_verifications ADD CONSTRAINT fk_ev_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE'
      )
    }

    notifications = @{
      create = @'
CREATE TABLE IF NOT EXISTS notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  channel TEXT NOT NULL,
  template VARCHAR(100) NOT NULL,
  payload JSONB NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  retries INTEGER NOT NULL DEFAULT 0,
  max_retries INTEGER NOT NULL DEFAULT 6,
  next_attempt_at TIMESTAMPTZ(6) NULL,
  scheduled_at TIMESTAMPTZ(6) NULL,
  sent_at TIMESTAMPTZ(6) NULL,
  error TEXT NULL,
  last_attempt_at TIMESTAMPTZ(6) NULL,
  locked_until TIMESTAMPTZ(6) NULL,
  locked_by VARCHAR(100) NULL,
  priority INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_notifications_channel CHECK (channel IN ('email','push')),
  CONSTRAINT chk_notifications_status CHECK (status IN ('pending','processing','sent','failed'))
);
'@
      indexes = @(
        'CREATE INDEX idx_notifications_status_scheduled ON notifications (status, scheduled_at)',
        'CREATE INDEX idx_notifications_next_attempt ON notifications (next_attempt_at)',
        'CREATE INDEX idx_notifications_locked_until ON notifications (locked_until)'
      )
      foreign_keys = @(
        'ALTER TABLE notifications ADD CONSTRAINT fk_notifications_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE'
      )
    }

    newsletter_subscribers = @{
      create = @'
CREATE TABLE IF NOT EXISTS newsletter_subscribers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NULL,
  email_hash BYTEA NULL,
  email_hash_key_version VARCHAR(64) NULL,
  email_enc BYTEA NULL,
  email_key_version VARCHAR(64) NULL,
  confirm_selector CHAR(12) DEFAULT NULL,
  confirm_validator_hash BYTEA DEFAULT NULL,
  confirm_key_version VARCHAR(64) DEFAULT NULL,
  confirm_expires TIMESTAMPTZ(6) DEFAULT NULL,
  confirmed_at TIMESTAMPTZ(6) DEFAULT NULL,
  unsubscribe_token_hash BYTEA DEFAULT NULL,
  unsubscribe_token_key_version VARCHAR(64) DEFAULT NULL,
  unsubscribed_at TIMESTAMPTZ(6) DEFAULT NULL,
  origin VARCHAR(100) DEFAULT NULL,
  ip_hash BYTEA DEFAULT NULL,
  ip_hash_key_version VARCHAR(64) DEFAULT NULL,
  meta JSONB DEFAULT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)
);
'@
      indexes = @(
        'CREATE UNIQUE INDEX ux_ns_email_hash ON newsletter_subscribers (email_hash)',
        'CREATE UNIQUE INDEX ux_ns_confirm_selector ON newsletter_subscribers (confirm_selector)',
        'CREATE INDEX idx_ns_user ON newsletter_subscribers (user_id)',
        'CREATE INDEX idx_ns_confirm_expires ON newsletter_subscribers (confirm_expires)',
        'CREATE INDEX idx_ns_unsubscribed_at ON newsletter_subscribers (unsubscribed_at)'
      )
      foreign_keys = @(
        'ALTER TABLE newsletter_subscribers ADD CONSTRAINT fk_ns_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL'
      )
    }

    system_jobs = @{
      create = @'
CREATE TABLE IF NOT EXISTS system_jobs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  job_type VARCHAR(100) NOT NULL,
  payload JSONB NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  retries INTEGER NOT NULL DEFAULT 0,
  scheduled_at TIMESTAMPTZ(6) NULL,
  started_at TIMESTAMPTZ(6) NULL,
  finished_at TIMESTAMPTZ(6) NULL,
  error TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_system_jobs_status CHECK (status IN ('pending','processing','done','failed'))
);
'@
      indexes = @(
        'CREATE INDEX idx_system_jobs_status_sched ON system_jobs (status, scheduled_at)'
      )
      foreign_keys = @()
    }

    worker_locks = @{
      create = @'
CREATE TABLE IF NOT EXISTS worker_locks (
  name VARCHAR(191) NOT NULL PRIMARY KEY,
  locked_until TIMESTAMPTZ(6) NOT NULL
);
'@
      indexes = @(
        'CREATE INDEX idx_worker_locks_until ON worker_locks (locked_until)'
      )
      foreign_keys = @()
    }

    encrypted_fields = @{
      create = @'
CREATE TABLE IF NOT EXISTS encrypted_fields (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  entity_table VARCHAR(64) NOT NULL,
  entity_pk VARCHAR(64) NOT NULL,
  field_name VARCHAR(64) NOT NULL,
  ciphertext BYTEA NOT NULL,
  meta JSONB NOT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  updated_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT ux_enc_entity_field UNIQUE (entity_table, entity_pk, field_name)
);
'@
      indexes = @(
        'CREATE INDEX idx_enc_entity ON encrypted_fields (entity_table, entity_pk)',
        'CREATE INDEX idx_encrypted_fields_field ON encrypted_fields (field_name)'
      )
      foreign_keys = @()
    }

    kms_providers = @{
      create = @'
CREATE TABLE IF NOT EXISTS kms_providers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  provider TEXT NOT NULL,
  location VARCHAR(100) NULL,
  project_tenant VARCHAR(150) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  is_enabled BOOLEAN NOT NULL DEFAULT TRUE,
  CONSTRAINT chk_kms_provider CHECK (provider IN ('gcp','aws','azure','vault'))
);
'@
      indexes = @()
      foreign_keys = @()
    }

    kms_keys = @{
      create = @'
CREATE TABLE IF NOT EXISTS kms_keys (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  provider_id BIGINT NOT NULL,
  external_key_ref VARCHAR(512) NOT NULL,
  purpose TEXT NOT NULL DEFAULT 'wrap',
  algorithm VARCHAR(64) NULL,
  status TEXT NOT NULL DEFAULT 'active',
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_kms_purpose CHECK (purpose IN ('wrap','encrypt','both')),
  CONSTRAINT chk_kms_status  CHECK (status  IN ('active','retired','disabled'))
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE kms_keys ADD CONSTRAINT fk_kms_keys_provider FOREIGN KEY (provider_id) REFERENCES kms_providers(id) ON DELETE CASCADE'
      )
    }

    encryption_policies = @{
      create = @'
CREATE TABLE IF NOT EXISTS encryption_policies (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  policy_name VARCHAR(100) NOT NULL UNIQUE,
  mode TEXT NOT NULL,
  layer_selection TEXT NOT NULL DEFAULT 'defined',
  min_layers SMALLINT NOT NULL DEFAULT 1,
  max_layers SMALLINT NOT NULL DEFAULT 3,
  aad_template JSONB NULL,
  notes TEXT NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_enc_mode CHECK (mode IN ('local','kms','multi-kms')),
  CONSTRAINT chk_enc_layer_selection CHECK (layer_selection IN ('defined','round_robin','random','hash_mod'))
);
'@
      indexes = @()
      foreign_keys = @()
    }

    policy_kms_keys = @{
      create = @'
CREATE TABLE IF NOT EXISTS policy_kms_keys (
  policy_id BIGINT NOT NULL,
  kms_key_id BIGINT NOT NULL,
  weight INTEGER NOT NULL DEFAULT 1,
  priority INTEGER NOT NULL DEFAULT 0,
  PRIMARY KEY (policy_id, kms_key_id)
);
'@
      indexes = @()
      foreign_keys = @(
        'ALTER TABLE policy_kms_keys ADD CONSTRAINT fk_policy_kms_keys_policy FOREIGN KEY (policy_id) REFERENCES encryption_policies(id) ON DELETE CASCADE',
        'ALTER TABLE policy_kms_keys ADD CONSTRAINT fk_policy_kms_keys_key FOREIGN KEY (kms_key_id) REFERENCES kms_keys(id) ON DELETE CASCADE'
      )
    }

    encryption_events = @{
      create = @'
CREATE TABLE IF NOT EXISTS encryption_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  entity_table VARCHAR(64) NOT NULL,
  entity_pk VARCHAR(64) NOT NULL,
  field_name VARCHAR(64) NOT NULL,
  op TEXT NOT NULL,
  policy_id BIGINT NULL,
  local_key_version VARCHAR(64) NULL,
  layers JSONB NULL,
  outcome TEXT NOT NULL,
  error_code VARCHAR(64) NULL,
  created_at TIMESTAMPTZ(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  CONSTRAINT chk_enc_op CHECK (op IN ('encrypt','decrypt','rotate','rehash','unwrap','wrap')),
  CONSTRAINT chk_enc_outcome CHECK (outcome IN ('success','failure'))
);
'@
      indexes = @(
        'CREATE INDEX idx_enc_events_entity ON encryption_events (entity_table, entity_pk, created_at)'
      )
      foreign_keys = @()
    }

  } # /Tables
}
